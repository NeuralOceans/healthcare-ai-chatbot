# GitLab CI/CD Pipeline for Healthcare AI Chatbot with TMAS Integration

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"
  IMAGE_TAG: $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
  TMAS_REGION: "us-1"

stages:
  - build
  - security-scan
  - deploy-staging
  - deploy-production

# Build stage
build:
  stage: build
  image: docker:24-dind
  services:
    - docker:24-dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker build -t $IMAGE_TAG .
    - docker push $IMAGE_TAG
  only:
    - main
    - develop
    - merge_requests

# TMAS Security Scan
tmas-security-scan:
  stage: security-scan
  image: ubuntu:22.04
  before_script:
    - apt-get update && apt-get install -y curl jq
    - curl -L -o tmas https://downloads.trendmicro.com/SupportFiles/TMAS/LATEST/Linux/tmas
    - chmod +x tmas
    - mv tmas /usr/local/bin/
    - tmas configure --api-key $TMAS_API_KEY --region $TMAS_REGION
  script:
    - echo "Scanning container image with TMAS..."
    - |
      tmas scan registry:$IMAGE_TAG -VMS \
        --output-format json \
        --output-file tmas-scan-results.json \
        --save-sbom \
        --override tmas_healthcare_overrides.yml
    
    - echo "Analyzing scan results..."
    - |
      if [ -f "tmas-scan-results.json" ]; then
        CRITICAL_COUNT=$(jq '.vulnerabilities | map(select(.severity == "critical")) | length' tmas-scan-results.json 2>/dev/null || echo "0")
        HIGH_COUNT=$(jq '.vulnerabilities | map(select(.severity == "high")) | length' tmas-scan-results.json 2>/dev/null || echo "0")
        MALWARE_COUNT=$(jq '.malware | length' tmas-scan-results.json 2>/dev/null || echo "0")
        SECRETS_COUNT=$(jq '.secrets | length' tmas-scan-results.json 2>/dev/null || echo "0")
        
        echo "=== TMAS Security Scan Summary ==="
        echo "Critical vulnerabilities: $CRITICAL_COUNT"
        echo "High vulnerabilities: $HIGH_COUNT"
        echo "Malware detected: $MALWARE_COUNT"
        echo "Secrets detected: $SECRETS_COUNT"
        echo "================================="
        
        if [ "$CRITICAL_COUNT" -gt "0" ] || [ "$MALWARE_COUNT" -gt "0" ]; then
          echo "‚ùå Critical security issues detected! Build failed."
          exit 1
        fi
        
        if [ "$HIGH_COUNT" -gt "5" ] || [ "$SECRETS_COUNT" -gt "0" ]; then
          echo "‚ö†Ô∏è High-risk issues detected. Review before production deployment."
        fi
        
        echo "‚úÖ Security scan completed successfully!"
      else
        echo "‚ùå TMAS scan results file not found!"
        exit 1
      fi
  artifacts:
    reports:
      junit: tmas-scan-results.xml
    paths:
      - tmas-scan-results.json
      - tmas-scan-results.sarif
      - sbom.json
    expire_in: 30 days
  dependencies:
    - build

# Deploy to Staging
deploy-staging:
  stage: deploy-staging
  image: alpine:latest
  before_script:
    - apk add --no-cache curl
    - curl -sL https://aka.ms/InstallAzureCLIDeb | sh
  script:
    - echo "Deploying to Azure Container Instances (Staging)..."
    - |
      az login --service-principal \
        --username $AZURE_CLIENT_ID \
        --password $AZURE_CLIENT_SECRET \
        --tenant $AZURE_TENANT_ID
    
    - az account set --subscription $AZURE_SUBSCRIPTION_ID
    
    - |
      az container create \
        --resource-group healthcare-ai-staging-rg \
        --name healthcare-ai-staging-$CI_COMMIT_SHORT_SHA \
        --image $IMAGE_TAG \
        --ports 5000 \
        --dns-name-label healthcare-ai-staging-$CI_COMMIT_SHORT_SHA \
        --environment-variables \
          NODE_ENV=staging \
          OPENAI_API_KEY=$OPENAI_API_KEY \
          AZURE_STORAGE_ACCOUNT_NAME=$AZURE_STORAGE_ACCOUNT_NAME \
          AZURE_STORAGE_ACCOUNT_KEY=$AZURE_STORAGE_ACCOUNT_KEY \
          AZURE_CONTAINER_NAME=$AZURE_CONTAINER_NAME \
        --restart-policy Always \
        --memory 2 \
        --cpu 1
    
    - echo "‚úÖ Staging deployment completed!"
    - echo "Staging URL: https://healthcare-ai-staging-$CI_COMMIT_SHORT_SHA.eastus.azurecontainer.io"
  environment:
    name: staging
    url: https://healthcare-ai-staging-$CI_COMMIT_SHORT_SHA.eastus.azurecontainer.io
  only:
    - develop
  dependencies:
    - tmas-security-scan

# Deploy to Production
deploy-production:
  stage: deploy-production
  image: alpine:latest
  before_script:
    - apk add --no-cache curl jq
    - curl -sL https://aka.ms/InstallAzureCLIDeb | sh
  script:
    - echo "Final security validation before production deployment..."
    - |
      if [ -f "tmas-scan-results.json" ]; then
        CRITICAL_COUNT=$(jq '.vulnerabilities | map(select(.severity == "critical")) | length' tmas-scan-results.json 2>/dev/null || echo "0")
        MALWARE_COUNT=$(jq '.malware | length' tmas-scan-results.json 2>/dev/null || echo "0")
        
        if [ "$CRITICAL_COUNT" -gt "0" ] || [ "$MALWARE_COUNT" -gt "0" ]; then
          echo "‚ùå Cannot deploy to production: Critical security issues detected!"
          exit 1
        fi
        
        echo "‚úÖ Final security check passed. Proceeding with production deployment."
      else
        echo "‚ùå Security scan results not available!"
        exit 1
      fi
    
    - echo "Deploying to Azure App Service (Production)..."
    - |
      az login --service-principal \
        --username $AZURE_CLIENT_ID \
        --password $AZURE_CLIENT_SECRET \
        --tenant $AZURE_TENANT_ID
    
    - az account set --subscription $AZURE_SUBSCRIPTION_ID
    
    - |
      az webapp config container set \
        --resource-group healthcare-ai-prod-rg \
        --name healthcare-ai-production \
        --docker-custom-image-name $IMAGE_TAG \
        --docker-registry-server-url $CI_REGISTRY
    
    - |
      az webapp config appsettings set \
        --resource-group healthcare-ai-prod-rg \
        --name healthcare-ai-production \
        --settings \
          NODE_ENV=production \
          OPENAI_API_KEY=$OPENAI_API_KEY \
          AZURE_STORAGE_ACCOUNT_NAME=$AZURE_STORAGE_ACCOUNT_NAME \
          AZURE_STORAGE_ACCOUNT_KEY=$AZURE_STORAGE_ACCOUNT_KEY \
          AZURE_CONTAINER_NAME=$AZURE_CONTAINER_NAME
    
    - |
      az webapp restart \
        --resource-group healthcare-ai-prod-rg \
        --name healthcare-ai-production
    
    - echo "üéâ Production deployment completed!"
    - echo "Production URL: https://healthcare-ai-production.azurewebsites.net"
  environment:
    name: production
    url: https://healthcare-ai-production.azurewebsites.net
  when: manual
  only:
    - main
  dependencies:
    - tmas-security-scan